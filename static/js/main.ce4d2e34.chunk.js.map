{"version":3,"sources":["hooks/useWordGame.js","App.js","index.js"],"names":["useWordGame","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","handleChange","e","value","target","calculateWordCount","trim","split","filter","word","length","startGame","current","disabled","focus","endGame","useEffect","setTimeout","time","App","ref","onChange","onClick","ReactDOM","render","document","getElementById"],"mappings":"kMA6CeA,MA3Cf,WAAyC,IAApBC,EAAmB,uDAAJ,GAAI,EACZC,mBAAS,IADG,mBAC7BC,EAD6B,KACvBC,EADuB,OAEMF,mBAASD,GAFf,mBAE7BI,EAF6B,KAEdC,EAFc,OAGMJ,oBAAS,GAHf,mBAG7BK,EAH6B,KAGdC,EAHc,OAIFN,mBAAS,GAJP,mBAI7BO,EAJ6B,KAIlBC,EAJkB,KAK9BC,EAAaC,iBAAO,MAE1B,SAASC,EAAaC,GAAI,IACfC,EAASD,EAAEE,OAAXD,MACPX,EAAQW,GAGZ,SAASE,EAAmBd,GAExB,OADiBA,EAAKe,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAGhD,SAASC,IACLf,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,IACRO,EAAWa,QAAQC,UAAW,EAC9Bd,EAAWa,QAAQE,QAGvB,SAASC,IACLnB,GAAiB,GACjBE,EAAaO,EAAmBd,IAapC,OAVAyB,qBAAU,WACHrB,GAAiBF,EAAgB,EAChCwB,YAAW,WACPvB,GAAiB,SAAAwB,GAAI,OAAIA,EAAO,OACjC,KACqB,IAAlBzB,GACNsB,MAEL,CAACtB,EAAeE,IAEZ,CAACI,aAAYE,eAAcV,OAAMI,gBAAeF,gBAAekB,YAAWd,c,MCNtEsB,MAhCf,WAAgB,IAAD,EASP/B,EAAY,IAPZW,EAFO,EAEPA,WACAE,EAHO,EAGPA,aACAV,EAJO,EAIPA,KACAI,EALO,EAKPA,cACAF,EANO,EAMPA,cACAkB,EAPO,EAOPA,UACAd,EARO,EAQPA,UAGJ,OACI,gCACI,uDACA,0BACIuB,IAAKrB,EACLsB,SAAUpB,EACVE,MAAOZ,EACPsB,UAAWlB,IAEf,kDAAqBF,KACrB,wBACI6B,QAASX,EACTE,SAAUlB,EAFd,mBAMA,8CAAiBE,SC3B7B0B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ce4d2e34.chunk.js","sourcesContent":["import {useState, useEffect, useRef} from \"react\"\n\nfunction useWordGame(startingTime = 10) {\n    const [text, setText] = useState(\"\")\n    const [timeRemaining, setTimeRemaining] = useState(startingTime)\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\n    const [wordCount, setWordCount] = useState(0)\n    const textBoxRef = useRef(null)\n    \n    function handleChange(e) {\n        const {value} = e.target\n        setText(value)\n    }\n    \n    function calculateWordCount(text) {\n        const wordsArr = text.trim().split(\" \")\n        return wordsArr.filter(word => word !== \"\").length\n    }\n    \n    function startGame() {\n        setIsTimeRunning(true)\n        setTimeRemaining(startingTime)\n        setText(\"\")\n        textBoxRef.current.disabled = false\n        textBoxRef.current.focus()\n    }\n    \n    function endGame() {\n        setIsTimeRunning(false)\n        setWordCount(calculateWordCount(text))\n    }\n    \n    useEffect(() => {\n        if(isTimeRunning && timeRemaining > 0) {\n            setTimeout(() => {\n                setTimeRemaining(time => time - 1)\n            }, 1000)\n        } else if(timeRemaining === 0) {\n            endGame()\n        }\n    }, [timeRemaining, isTimeRunning])\n    \n    return {textBoxRef, handleChange, text, isTimeRunning, timeRemaining, startGame, wordCount}\n}\n\nexport default useWordGame\n","import React from \"react\"\nimport useWordGame from \"./hooks/useWordGame\"\nimport './styles.css'\n\nfunction App() {\n    const {\n        textBoxRef, \n        handleChange, \n        text, \n        isTimeRunning, \n        timeRemaining, \n        startGame, \n        wordCount\n    } = useWordGame(10)\n    \n    return (\n        <div>\n            <h1>How fast do you type?</h1>\n            <textarea\n                ref={textBoxRef}\n                onChange={handleChange}\n                value={text}\n                disabled={!isTimeRunning}\n            />\n            <h4>Time remaining: {timeRemaining}</h4>\n            <button \n                onClick={startGame}\n                disabled={isTimeRunning}\n            >\n                Start\n            </button>\n            <h1>Word count: {wordCount}</h1>\n        </div>\n    )\n}\n\nexport default App","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}